name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
          
      - name: Install dependencies
        id: install
        run: |
          npm ci || (
            echo "::error::Failed to install dependencies. Retrying with clean install..."
            rm -rf node_modules package-lock.json
            npm install
          )
        
      - name: Type compatibility check
        id: type-check
        run: |
          # Check current version
          if ! npm run type-check > current-types.txt; then
            echo "::error::Type check failed for current version"
            exit 1
          fi
          
          # Check compatibility with previous version
          git checkout HEAD^
          npm ci
          if ! npm run type-check > prev-types.txt; then
            echo "::warning::Type check failed for previous version"
          fi
          git checkout -
          npm ci
          
          # Compare and analyze type changes
          echo "## Type Compatibility Changes" > type-report.md
          if ! diff prev-types.txt current-types.txt > type-changes.txt; then
            echo "⚠️ Breaking type changes detected:" >> type-report.md
            echo "\`\`\`" >> type-report.md
            cat type-changes.txt >> type-report.md
            echo "\`\`\`" >> type-report.md
          else
            echo "✅ No breaking type changes detected" >> type-report.md
          fi

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          echo "## Changelog" > CHANGELOG.md
          if [ -z "$PREVIOUS_TAG" ]; then
            # If no previous tag exists, get all commits
            git log --pretty=format:"- %s (%h)" > commits.txt
          else
            # Get commits since previous tag
            git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD > commits.txt
          fi
          
          # Categorize changes
          {
            echo "### 🚀 Features"
            grep -i "feat:" commits.txt || echo "No new features"
            
            echo -e "\n### 🐛 Bug Fixes"
            grep -i "fix:" commits.txt || echo "No bug fixes"
            
            echo -e "\n### 📝 Documentation"
            grep -i "docs:" commits.txt || echo "No documentation changes"
            
            echo -e "\n### ⚡ Performance"
            grep -i "perf:" commits.txt || echo "No performance changes"
            
            echo -e "\n### 🔨 Other Changes"
            grep -v -i "feat:\|fix:\|docs:\|perf:" commits.txt || echo "No other changes"
          } >> CHANGELOG.md
          
          # Add type compatibility changes
          cat type-report.md >> CHANGELOG.md

      - name: Run tests
        id: test
        run: |
          if ! npm test; then
            echo "::error::Tests failed"
            exit 1
          fi
        
      - name: Run performance tests
        id: perf-test
        run: |
          # Set performance thresholds
          echo '{
            "thresholds": {
              "FCP": 1800,
              "LCP": 2500,
              "CLS": 0.1,
              "TTI": 3800,
              "TBT": 200
            }
          }' > perf-thresholds.json
          
          if ! npm run test:perf; then
            echo "::error::Performance tests failed"
            exit 1
          fi
        
      - name: Run accessibility tests
        id: a11y
        run: |
          if ! npm run test:a11y; then
            echo "::error::Accessibility tests failed"
            exit 1
          fi
        
      - name: Build
        id: build
        run: |
          if ! npm run build; then
            echo "::error::Build failed"
            exit 1
          fi
        
      - name: Check bundle size
        id: bundle
        run: |
          echo "## Bundle Size Analysis" > bundle-report.md
          if ! npx bundlewatch --config .bundlewatch.config.json; then
            echo "::warning::Bundle size exceeds threshold"
            echo "⚠️ Bundle size exceeds threshold" >> bundle-report.md
          else
            echo "✅ Bundle size within threshold" >> bundle-report.md
          fi
        
      - name: Generate documentation
        id: docs
        run: |
          if ! npm run docs; then
            echo "::warning::Documentation generation failed"
          fi
        
      - name: Performance test
        id: performance
        run: |
          npm install -g @lhci/cli@0.13.x
          
          # Run Lighthouse CI
          if ! lhci autorun \
            --collect.url=http://localhost:3000 \
            --collect.startServerCommand="npm run start" \
            --collect.numberOfRuns=3 \
            --upload.target=temporary-public-storage \
            --jsonOutput=./lighthouse-results.json; then
            echo "::warning::Performance checks failed"
          fi
          
          # Generate performance report
          echo "## Performance Metrics" > performance-report.md
          node .github/scripts/analyze-lighthouse.js ./lighthouse-results.json >> performance-report.md

      - name: Generate release notes
        id: release-notes
        run: |
          {
            echo "# Release $(git describe --tags --abbrev=0)"
            echo "## Overview"
            echo "This release includes the following changes:"
            cat CHANGELOG.md
            
            echo -e "\n## Performance Impact"
            cat performance-report.md
            
            echo -e "\n## Bundle Size"
            cat bundle-report.md
            
            echo -e "\n## Documentation Updates"
            if [ -f "docs/CHANGELOG.md" ]; then
              cat docs/CHANGELOG.md
            else
              echo "No documentation changes"
            fi
          } > RELEASE_NOTES.md

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Publish to NPM
        id: publish
        run: |
          if ! npm publish; then
            echo "::error::Failed to publish to NPM"
            exit 1
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Update documentation site
        id: docs-deploy
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          if ! npm run deploy:docs; then
            echo "::warning::Failed to deploy documentation"
          fi
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs/
          git commit -m "chore: update documentation for ${{ github.ref_name }}" || echo "No documentation changes"
          
          if ! git push; then
            echo "::warning::Failed to push documentation changes"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: release-artifacts
          path: |
            CHANGELOG.md
            RELEASE_NOTES.md
            type-report.md
            performance-report.md
            bundle-report.md
            lighthouse-results.json

      - name: Check for failures
        if: failure()
        run: |
          echo "::error::Release workflow failed. Check the logs for details."
          exit 1 